#!/bin/sh

# open cluster management (ocm) hub and managed minikube kvm amd64 clusters deploy
# https://github.com/ShyamsundarR/ocm-minikube/README.md

set -x
set -e
trap 'echo exit value: $?' EXIT

#minikube delete -p hub
#minikube delete -p cluster1

mkdir -p ${HOME}/.local/bin
PATH=${HOME}/.local/bin:${PATH}

# curl not installed?
if ! command -v curl; then
	cd ${HOME}/.local/bin
	wget -O curl https://github.com/moparisthebest/static-curl/releases/download/v7.76.0/curl-amd64
	chmod +x curl
	cd -
fi

# minikube not installed?
if ! command -v minikube; then
	# https://minikube.sigs.k8s.io/docs/start/
	# minikube-linux-amd64 download and install
	cd ${HOME}/.local/bin
	minikube_version=latest
	minikube_version=v1.18.1
	curl -Lo minikube https://storage.googleapis.com/minikube/releases/${minikube_version}/minikube-linux-amd64
	unset -v minikube_version
	chmod +x minikube
	cd -
fi

minikube_start_options=--driver=kvm2
. /etc/os-release # NAME

# kvm not installed?
if false; then
	# https://minikube.sigs.k8s.io/docs/drivers/kvm2/
	case ${NAME} in
	"Red Hat Enterprise Linux Server")
		# https://access.redhat.com/articles/1344173#Q_how-install-virtualization-packages
		sudo yum install libvirt -y
		;;
	"Ubuntu")
		# https://help.ubuntu.com/community/KVM/Installation
		sudo apt-get update
		if true || test ${VERSION_ID} -ge "18.10"; then
			sudo apt-get install qemu-kvm libvirt-daemon-system libvirt-clients bridge-utils -y
		else
			sudo apt-get install qemu-kvm libvirt-bin ubuntu-vm-builder bridge-utils -y
		fi
		;;
	esac
	sudo usermod -aG libvirt ${LOGNAME}
	# groups refresh
	exec su - ${LOGNAME}
fi

# ocm hub cluster deploy
minikube start ${minikube_start_options} --profile=hub --cpus=4

# kubectl not installed?
# TODO or less than version 1.11 (wait unsupported)
if ! command -v kubectl; then
	# https://kubernetes.io/docs/tasks/tools/install-kubectl-linux/#install-kubectl-binary-with-curl-on-linux
	cd ${HOME}/.local/bin
	curl -LO https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl
	chmod +x kubectl
	cd -
fi

if ! command -v kustomize; then
	cd ${HOME}/.local/bin
	curl -L https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv4.0.5/kustomize_v4.0.5_linux_amd64.tar.gz | tar -xz
	cd -
fi

kubectl apply -f https://raw.githubusercontent.com/kubernetes/cluster-registry/master/cluster-registry-crd.yaml
set +e
git clone https://github.com/open-cluster-management/registration-operator
git clone https://github.com/ShyamsundarR/ocm-minikube
set -e
# registration-operator make deploy-hub requires go version 1.14.4 or greater
	# https://golang.org/ref/mod#versions
	# https://semver.org/spec/v2.0.0.html
case ${NAME} in
"Ubuntu")
	deploy_arguments=GO_REQUIRED_MIN_VERSION:=
	;;
esac
# go not installed?
# TODO or version less than 1.14.4?
if ! command -v go
#|| $(go version | { read _ _ v _; echo ${v#go}; })
then
	PATH=${HOME}/.local/go/bin:${PATH}
	if ! command -v go; then
		cd ${HOME}/.local
		curl -L https://golang.org/dl/go1.16.2.linux-amd64.tar.gz | tar -xz
		cd -
	fi
fi
cd registration-operator
git checkout release-2.3
# managed cluster names other than cluster1 require
set +e
git apply ../ocm-minikube/registration-operator.diff
set -e
set +e
make deploy-hub ${deploy_arguments}
<<!
intermittent on start:
INFO[0014] Created Subscription: cluster-manager-v0-4-0-sub
FATA[0016] Failed to run packagemanifests: error approving install plan: Operation cannot be fulfilled on installplans.operators.coreos.com "install-h5vdg": the object has been modified; please apply your changes to the latest version and try again
Makefile:112: recipe for target 'deploy-hub-operator' failed
make: *** [deploy-hub-operator] Error 1

expected if restart:
FATA[0000] Failed to run packagemanifests: create catalog: error creating catalog source: catalogsources.operators.coreos.com "cluster-manager-catalog" already exists
Makefile:112: recipe for target 'deploy-hub-operator' failed
make: *** [deploy-hub-operator] Error 1

!
set -e
cd ..
date
kubectl --context hub -n olm                     wait deployments --all --for condition=available --timeout 1m
date
kubectl --context hub -n open-cluster-management wait deployments --all --for condition=available
date
# https://github.com/kubernetes/kubernetes/issues/83242
i=0; while ! kubectl --context hub -n open-cluster-management-hub wait deployments --all --for condition=available --timeout 0; do test $i -lt 90; sleep 1; i=$((i+1)); done; unset -v i

# managed cluster1 deploy
minikube start ${minikube_start_options} --profile=cluster1
unset -v minikube_start_options

kubectl --context hub config view --flatten --minify >/tmp/hub-config

spoke_add()
{
	cluster_name=${1}
	cd registration-operator
	export MANAGED_CLUSTER=${cluster_name}
	export HUB_KUBECONFIG=/tmp/hub-config
	kubectl config use-context ${cluster_name}
	set +e
	make deploy-spoke ${deploy_arguments}
	# FATA[0000] Failed to run packagemanifests: create catalog: error creating catalog source: catalogsources.operators.coreos.com "klusterlet-catalog" already exists
	set -e
	cd ..

	date
	kubectl --context ${cluster_name} -n open-cluster-management wait deployments --all --for condition=available
	date
	# https://github.com/kubernetes/kubernetes/issues/83242
	i=0; while ! kubectl --context ${cluster_name} -n open-cluster-management-agent wait deployments/klusterlet-registration-agent --for condition=available --timeout 0; do test $i -lt 60; sleep 1; i=$((i+1)); done; unset -v i

	# hub register managed cluster
	set +e
	kubectl --context hub certificate approve $(kubectl --context hub get csr --field-selector spec.signerName=kubernetes.io/kube-apiserver-client --selector open-cluster-management.io/cluster-name=${cluster_name} -oname)
	# error: one or more CSRs must be specified as <name> or -f <filename>
	set -e
	kubectl --context hub patch managedcluster ${cluster_name} -p='{"spec":{"hubAcceptsClient":true}}' --type=merge
	date
	kubectl --context hub wait managedcluster/${cluster_name} --for condition=ManagedClusterConditionAvailable
	date
	kubectl --context ${cluster_name} -n open-cluster-management-agent wait deployments --all --for condition=available
	date

	# test
	mkdir -p /tmp/ocm-minikube
	cp -R ocm-minikube/examples /tmp/ocm-minikube
	sed -e "s,KIND_CLUSTER,${cluster_name}," -i /tmp/ocm-minikube/examples/kustomization.yaml
	set +e
	kubectl --context hub apply -k /tmp/ocm-minikube/examples
	set -e
	date
	kubectl --context ${cluster_name} wait pods/hello --for condition=ready --timeout 90s
	date
	# delete may take more than 30 seconds
	kubectl --context hub delete -k /tmp/ocm-minikube/examples --wait=false
	date
	# sed -e "s,${cluster_name},KIND_CLUSTER," -i /tmp/ocm-minikube/examples/kustomization.yaml
	set +e
	kubectl --context ${cluster_name} wait pods/hello --for delete --timeout 0
	# --wait=true  error: no matching resources found
	# --wait=false error: timed out waiting for the condition on pods/hello
	set -e
	date
	unset -v cluster_name
}
spoke_add cluster1

# hub subscription operator
set +e
git clone https://github.com/open-cluster-management/multicloud-operators-subscription
set -e
cd multicloud-operators-subscription
set +e
git apply ../ocm-minikube/multicloud-operators-subscription.diff
set -e
kubectl config use-context hub
USE_VENDORIZED_BUILD_HARNESS=faked make deploy-community-hub
cd ..

date
kubectl --context hub -n multicluster-operators wait deployments --all --for condition=available --timeout 2m
date

spoke_add_hub()
{
	spoke_add ${1}
	kubectl --context hub patch managedcluster ${1} -p='{"metadata":{"labels":{"local-cluster":"true"}}}' --type=merge
}
spoke_add_hub hub
unset -v deploy_arguments

# hub managed cluster subscription operator
export MANAGED_CLUSTER_NAME=hub
cd multicloud-operators-subscription
# export HUB_KUBECONFIG=/tmp/hub-config
cp -f ${HUB_KUBECONFIG} /tmp/kubeconfig
kubectl --context hub -n multicluster-operators delete secret appmgr-hub-kubeconfig --ignore-not-found
kubectl --context hub -n multicluster-operators create secret generic appmgr-hub-kubeconfig --from-file=kubeconfig=/tmp/kubeconfig
mkdir -p munge-manifests
cp deploy/managed/operator.yaml munge-manifests/operator.yaml
sed -i 's/<managed cluster name>/'"${MANAGED_CLUSTER_NAME}"'/g' munge-manifests/operator.yaml
sed -i 's/<managed cluster namespace>/'"${MANAGED_CLUSTER_NAME}"'/g' munge-manifests/operator.yaml
sed -i '0,/name: multicluster-operators-subscription/{s/name: multicluster-operators-subscription/name: multicluster-operators-subscription-mc/}' munge-manifests/operator.yaml
unset -v MANAGED_CLUSTER_NAME
kubectl --context hub apply -f munge-manifests/operator.yaml
date
kubectl --context hub -n multicluster-operators wait deployments --all --for condition=available
date

cluster_name=cluster1
# managed cluster subscription operator
# export HUB_KUBECONFIG=/tmp/hub-config
kubectl config use-context ${cluster_name}
export MANAGED_CLUSTER_NAME=${cluster_name}
USE_VENDORIZED_BUILD_HARNESS=faked make deploy-community-managed
unset -v MANAGED_CLUSTER_NAME
unset -v HUB_KUBECONFIG
date
kubectl --context ${cluster_name} -n multicluster-operators wait deployments --all --for condition=available
date

# test
kubectl config use-context hub
kubectl --context hub apply -f examples/helmrepo-hub-channel
# https://github.com/kubernetes/kubernetes/issues/83242
i=0; while ! kubectl --context ${cluster_name} wait deployments --selector app=nginx-ingress --for condition=available --timeout 0; do test $i -lt 60; sleep 1; i=$((i+1)); done; unset -v i
kubectl --context hub delete -f examples/helmrepo-hub-channel
set +e
kubectl --context ${cluster_name} wait deployments --selector app=nginx-ingress --for delete --timeout 1m
set -e
cd ..

# application samples test
kubectl --context hub patch managedcluster ${cluster_name} -p='{"metadata":{"labels":{"usage":"test"}}}' --type=merge
set +e
git clone https://github.com/open-cluster-management/application-samples
set -e
cd application-samples
set +e
git apply ../ocm-minikube/application-samples.diff
set -e
kubectl --context hub apply -k subscriptions/channel
set +e
kubectl --context hub apply -k subscriptions/book-import
# Error from server (InternalError): error when creating "subscriptions/book-import": Internal error occurred: failed calling webhook "applications.apps.open-cluster-management.webhook": Post "https://multicluster-operators-application-svc.multicluster-operators.svc:443/app-validate?timeout=10s": dial tcp 10.106.210.84:443: connect: connection refused
kubectl --context hub apply -f subscriptions/book-import/application.yaml
# Error from server (InternalError): error when creating "subscriptions/book-import/application.yaml": Internal error occurred: failed calling webhook "applications.apps.open-cluster-management.webhook": Post "https://multicluster-operators-application-svc.multicluster-operators.svc:443/app-validate?timeout=10s": dial tcp 10.106.210.84:443: connect: connection refused
set -e
# https://github.com/kubernetes/kubernetes/issues/83242
i=0; while ! kubectl --context ${cluster_name} -n book-import wait deployments --all --for condition=available --timeout 0; do test $i -lt 30; sleep 1; i=$((i+1)); done; unset -v i
set +e
kubectl --context hub delete -f subscriptions/book-import/application.yaml
# Error from server (NotFound): error when deleting "subscriptions/book-import/application.yaml": applications.app.k8s.io "book-import" not found
kubectl --context hub delete -k subscriptions/book-import
# Error from server (NotFound): error when deleting "subscriptions/book-import": applications.app.k8s.io "book-import" not found
set -e
kubectl --context hub delete -k subscriptions/channel
kubectl --context ${cluster_name} -n book-import wait pods --all --for delete
unset -v cluster_name
